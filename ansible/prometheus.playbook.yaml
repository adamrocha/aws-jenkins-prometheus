---
- hosts: all
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:

  - name: Install base packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'lsof' ]

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu lunar stable
      state: present

  - name: Update apt and install docker-ce
    apt:
      update_cache=yes
      name=docker-ce
      state=latest

  - name: Enable Docker services
    service:
      name: "docker"
      state: started
      enabled: yes

#  - name: Download Open Telemetry
#    get_url:
#      url: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.105.0/otelcol_0.105.0_linux_arm64.deb
#      dest: /tmp/otelcol_0.105.0_linux_arm64.deb

#  - name: Install Open Telemetry
#    apt:
#      deb: /tmp/otelcol_0.105.0_linux_arm64.deb

  - name: Download Node Exporter
    get_url:
      url: https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-arm64.tar.gz
      dest: /tmp/node_exporter-1.8.2.linux-arm64.tar.gz

  - name: Extract tar ball
    ansible.builtin.unarchive:
      src: /tmp/node_exporter-1.8.2.linux-arm64.tar.gz
      dest: /opt
      remote_src: yes

  - name: Create symbolic link to executable
    ansible.builtin.file:
      src: /opt/node_exporter-1.8.2.linux-arm64/node_exporter
      dest: /usr/local/bin/node_exporter
      owner: root
      group: root
      state: link

  - name: Run Node Exporter
    ansible.builtin.shell: node_exporter &

# Provision node A
- hosts: prometheus-ec-a
  remote_user: ubuntu
  become: yes
  become_method: sudo

  tasks:

  - name: Copy file to target node
    copy:
      src: prometheus-config.yaml
      dest: /opt/prometheus-config.yaml

  - name: Run prometheus container
    community.docker.docker_container:
      name: prometheus
      image: prom/prometheus
      state: started
      ports:
        - "9090:9090"

  - name: Copy config file to prometheus container
    community.docker.docker_container_copy_into:
      container: prometheus
      path: /opt/prometheus-config.yaml
      container_path: /etc/prometheus/prometheus.yml

  - name: Restart prometheus container
    community.docker.docker_container:
      name: prometheus
      image: prom/prometheus
      state: started
      restart: true

  - name: Check prometheus container status
    docker_container_info:
      name: prometheus
    register: result

  - name: Does prometheus container exist?
    debug:
      msg: "The prometheus container {{ 'exists' if result.exists else 'does not exist' }}"

  - name: Print the status of the prometheus container
    debug:
      msg: "The prometheus container status is {{ result.container['State']['Status'] }}"
    when: result.exists

  - name: Run grafana container
    community.docker.docker_container:
      name: grafana
      image: grafana/grafana-enterprise
      state: started
      ports:
        - "3000:3000"

  - name: Check grafana container status
    docker_container_info:
      name: grafana
    register: result

  - name: Does grafana container exist?
    debug:
      msg: "The grafana container {{ 'exists' if result.exists else 'does not exist' }}"

  - name: Print the status of the grafana container
    debug:
      msg: "The gafana container status is {{ result.container['State']['Status'] }}"
    when: result.exists