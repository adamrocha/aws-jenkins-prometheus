- name: All hosts
  hosts: all
  remote_user: ubuntu
  become: true
  become_method: ansible.builtin.sudo
  tasks:
    - name: Install base packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - 'apt-transport-https'
        - 'software-properties-common'
        - 'python3-pip'
        - 'virtualenv'
    - name: Echo base packages installation
      ansible.builtin.debug:
        msg: "Base packages installed and configured"
    - name: Create a tmp directory with specific permissions
      ansible.builtin.file:
        path: /root/.ansible/tmp
        state: directory
        mode: '0755'
#        owner: youruser
#        group: yourgroup
    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        update_cache: true
        name: docker-ce
        state: present
    - name: Enable Docker services
      ansible.builtin.service:
        name: "docker"
        state: started
        enabled: true
    - name: Download Open Telemetry
      ansible.builtin.get_url:
        url: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.105.0/otelcol_0.105.0_linux_arm64.deb
        dest: /tmp/otelcol_0.105.0_linux_arm64.deb
        mode: '0644'
    - name: Install Open Telemetry
      ansible.builtin.apt:
        deb: /tmp/otelcol_0.105.0_linux_arm64.deb
        state: present
    - name: Download Node Exporter
      ansible.builtin.get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-arm64.tar.gz
        dest: /tmp/node_exporter-1.8.2.linux-arm64.tar.gz
        mode: '0644'
    - name: Extract tar ball
      ansible.builtin.unarchive:
        src: /tmp/node_exporter-1.8.2.linux-arm64.tar.gz
        dest: /opt
        remote_src: true
    - name: Create symbolic link to executable
      ansible.builtin.file:
        src: /opt/node_exporter-1.8.2.linux-arm64/node_exporter
        dest: /usr/local/bin/node_exporter
        owner: root
        group: root
        state: link
    - name: Create Node Exporter service
      ansible.builtin.copy:
        src: files/node_exporter.service
        dest: /etc/systemd/system/
        mode: "0644"
    - name: Enable and start Node Exporter service
      ansible.builtin.service:
        name: node_exporter
        enabled: true
        state: started
# Provision Prometheus and Grafana
- name: Provision Prometheus
  hosts: prometheus-ec2
  remote_user: ubuntu
  become: true
  become_method: ansible.builtin.sudo
  tasks:
    - name: Copy file to target node
      ansible.builtin.copy:
        mode: '0644'
        src: files/prometheus-config.yaml
        dest: /opt/prometheus-config.yaml
    - name: Start Prometheus container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus
        state: started
        ports:
          - "9090:9090"
    - name: Copy config file to prometheus container
      community.docker.docker_container_copy_into:
        container: prometheus
        path: /opt/prometheus-config.yaml
        container_path: /etc/prometheus/prometheus.yml
    - name: Restart Prometheus container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus
        state: started
        restart: true
    - name: Check Prometheus container status
      community.docker.docker_container_info:
        name: prometheus
      register: result
    - name: Does Prometheus container exist?
      ansible.builtin.debug:
        msg: "The prometheus container {{ 'exists' if result.exists else 'does not exist' }}"
    - name: Print the status of the Prometheus container
      ansible.builtin.debug:
        msg: "The Prometheus container is {{ result.container['State']['Status'] }}"
      when: result.exists
    - name: Run Grafana container
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana-enterprise
        state: started
        ports:
          - "3000:3000"
    - name: Check Grafana container status
      community.docker.docker_container_info:
        name: grafana
      register: result
    - name: Does Grafana container exist?
      ansible.builtin.debug:
        msg: "The grafana container {{ 'exists' if result.exists else 'does not exist' }}"
    - name: Print the status of the Grafana container
      ansible.builtin.debug:
        msg: "The Grafana container is {{ result.container['State']['Status'] }}"
      when: result.exists
    - name: Check if any containers need auto-restart update
      ansible.builtin.shell: docker update --restart unless-stopped $(docker ps -q)
      register: containers_need_update
      failed_when: false
      changed_when: containers_need_update.rc == 0
    - name: Docker auto-restart containers
      ansible.builtin.shell: docker update --restart unless-stopped $(docker ps -q)
      when: containers_need_update.rc == 0
      changed_when: containers_need_update.rc == 0
# Provision Jenkins
- name: Provision Jenkins
  hosts: jenkins-ec2
  remote_user: ubuntu
  become: true
  become_method: ansible.builtin.sudo
  tasks:
    - name: Run Jenkins container
      community.docker.docker_container:
        name: jenkins
        image: jenkins/jenkins
        state: started
        ports:
          - "8080:8080"
    - name: Check Jenkins container status
      community.docker.docker_container_info:
        name: jenkins
      register: result
    - name: Does Jenkins container exist?
      ansible.builtin.debug:
        msg: "The Jenkins container {{ 'exists' if result.exists else 'does not exist' }}"
    - name: Print the status of the Jenkins container
      ansible.builtin.debug:
        msg: "The Jenkins container is {{ result.container['State']['Status'] }}"
      when: result.exists
    - name: Check if any containers need auto-restart update
      ansible.builtin.shell: docker update --restart unless-stopped $(docker ps -q)
      register: containers_need_update
      failed_when: false
      changed_when: containers_need_update.rc == 0
